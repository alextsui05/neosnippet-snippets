include c.snip

# #include <...>
snippet inc
alias   #inc, #include
    #include <${1:iostream}>${0}
# #include "..."
snippet inc2
alias   #inc2, #include2
    #include "${1}"${0}

snippet     template
abbr        template <T>
    template<typename ${1:T}> 

snippet     class
abbr        class {}
    class ${1:#:name} {
        ${2}
    public:
        $1(${3});
    };
    $1::$1($3) {
        ${0:TARGET}
    }

snippet     class-without-constructor
abbr        class {}
    class ${1:#:name} {
        ${2}
    };

snippet     try
abbr        try catch
    try {
        ${1:TARGET}
    } catch (${2:e:xception}) {
        ${3}
    }

# range based for ( C++11 feature )
snippet     for_CPP11
abbr        for (:) {}
    for (${1:auto&& }${2:var} : ${3:container}) {
        ${0:TARGET}
    }

# lambda expression ( C++11 feature )
snippet     lambda
abbr        [](){}
    [${1}](${2})${3}{ ${4:TARGET} }

# scoped enumeration ( C++11 feature )
snippet     enum_scoped
abbr        enum struct {}
    enum struct { ${1:TARGET} }

# static assert ( C++11 feature )
snippet     static_assert
abbr        static_assert(,"")
    static_assert( ${1}, "${2}" );${0}

delete      namespace
snippet     namespace
abbr        namespace {}
options     head
    namespace ${1:#:name} {
        ${0:TARGET}
    } // namespace $1

snippet     static_cast
abbr        static_cast<>()
    static_cast<${1}>(${2})${0}

snippet     reinterpret_cast
abbr        reinterpret_cast<>()
    reinterpret_cast<${1}>(${2})${0}

snippet     const_cast
abbr        const_cast<>()
    const_cast<${1}>(${2})${0}

snippet     dynamic_cast
abbr        dynamic_cast<>()
    dynamic_cast<${1}>(${2})${0}

snippet     helloworld
abbr        #include<iostream> int main...
    #include <iostream>

    int main(int argc, char const* argv[])
    {
        std::cout << "hello, world!" << std::endl;
        return 0;
    }

snippet     p
options     head
  std::cout << ${0:TARGET} << std::endl;

snippet     qmainwindow
abbr        #include<QMainWindow> class...
    #include <QMainWindow>
    #include "ui_$1.h"

    class ${1:#:name} : public QMainWindow
    {
    Q_OBJECT
        typedef $1 Self;
        typedef QMainWindow Base;

    protected:
        Ui::$1* ui;

    public:
        $1( QWidget* parent = 0, Qt::WindowFlags flags = 0 );
        virtual ~$1( );

    protected:
        void setupUi( );

    }; // class $1${0}

    $1::$1( QWidget* parent, Qt::WindowFlags flags ):
        Base( parent, flags ),
        ui( new Ui::$1 )
    {
        this->setupUi( );

    }

    $1::~$1( )
    {

    }

    void $1::setupUi( )
    {
        ui->setupUi( this );
    }

snippet qclt
    #include <QApplication>
    #include "util/CommandLineTool.h"
    ${1}

    class Main : public ucd::CommandLineTool
    {
    protected:
        ${2}

    public:
        typedef ucd::CommandLineTool Base;

        Main( int argc, char *argv[] ):
            Base( argc, argv )${3}
        {
            setupProgramOptions( );
        }

        virtual void setupProgramOptions( )
        {
            this->Base::setupProgramOptions( );
            m_options.add_options( )
                ("input,i", po::value< std::string >()->required(), "input file")
            ;
            addPositionalOption( "input", 1 );
        }

        virtual void help( )
        {
            std::cout << "Brief 60-character description of the program.\n";
            std::cout << "\n";
        }

        virtual void usage( )
        {
            std::cout << "Usage: " << m_args[0] << " input\n";
            std::cout << m_options << "\n";
        }

        virtual int run( )
        {
            int errorCode = 0;
            if ( ! parseProgramOptions( &errorCode ) )
            {
                return errorCode;
            }

            // entry point here
            ${0}

            return 0;
        }
    };

    int main(int argc, char *argv[])
    {
        QApplication app(argc, argv);
        Main program(argc, argv);
        int retCode = program.run( );
        return retCode;
    }

snippet qgi
    #include <QGraphicsItem>

    class QPainter;
    class QStyleOptionGraphicsItem;

    class ${1:#:name} : public QGraphicsItem
    {
    public:
        typedef $1 Self;
        typedef QGraphicsItem Base;

        $1(QGraphicsItem* parent = 0);
        virtual ~$1();

        virtual QRectF boundingRect() const;
        virtual void paint( QPainter* painter, const QStyleOptionGraphicsItem* option,
            QWidget* widget = 0 );

    }; // class $1

    #include "$1.h"
    #include <QPainter>
    #include <QStyleOptionGraphicsItem>

    $1::$1(QGraphicsItem* parent):
        Base(parent)
    {

    }

    $1::~$1( )
    {

    }

    QRectF $1::boundingRect() const
    {
        return QRectF();
    }

    void $1::paint(QPainter* painter, const QStyleOptionGraphicsItem* option,
        QWidget* widget)
    {

    }

